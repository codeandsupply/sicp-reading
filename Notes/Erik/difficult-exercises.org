* Chapter 1
** Section 1-1

Exercize 1.3 isn't hard in the simple case, but I wonder if there's a
cleaner solution. Also, my solution doesn't gracefully handle equal
arguments.


Exercise 1.5 would be nice to talk through.

Exercise 1.6 could use some discussion. I think the answer has to do
with how things are evaluated, but I'm not sure.

Exercise 1.7 I have a working implementation, that works well for
small numbers, and actually returns for small numbers, but doesn't
work great for large numbers. This clearly has something to do with my
good-enough-change? function, but I'm not sure what.

** Section 1-2

Exercise 1.13 I got this working. I'm not sure if there's a better way
to do it though. Is it totally necessary to keep track of this many
steps back? Is there a way to generalize this for n steps of history?

Exercise 1.12 I'm not sure what this is even asking for.

Exercise 1.13 I'm skiping this proof.

** Section 1-3

I remember we spoke about 1.32, 1.33 and 1.42 - 1.44. Probably more
but that's what comes to mind

You should see if you can get 1.46. I didn't figure it out. Jackie had
to look up the answer. And I don't think anyone else got it.
* Chapter 2
** Section 2.2
Exercise 2.18 - This doesn't produce a list like I'm used to. Is there
a better way to do this?

Exercise 2.22 - I didn't do this, but I think it relates to my problem
above. Maybe talk about it?

Exercise 2.23 - I think my second solution still uses linear space,
can we make it iterative?

Exercise 2.24 - We should do this one the whiteboard

Exercise 2.26 - Can we talk about why this is interesting?

Exercise 2.28 - This may relate to why 2.26 is interesting. I'd like
to see other people's solutions. Did anyone do this without using append?
** Section 2.3

Exercise 2.55
  - I don't understand what this is doing, I just put a guess in my answer.

Exercise 2.57 - How do you do variadic functions?

Exercise 2.58 - This just looks tedious. Maybe come back to it

Exercise 2.60 - Can we talk about the discussion section?
Specifically, I'm interested in the timing of union-set (what is the
timing of append?). I'm also curious about situations where this is better.

Exercise 2.61 - curious to see others implementations. List insertion. Also,

Exercise 2.63 - Lets talk about orders of growth here. Append?

Exercise 2.64 - let* would be useful here.
              - I think I understand how this works, would be fun to discuss

** Section 2.4

Exercise 2.76 - Fun to discuss. Especially the last part. Arguements?
* Chapter 3
** Section 2
  - 3.9
    - How does tail call elimination play into this?
** Section 3
- Exercise 3.16
  - This was just fun
- Exercise 3.17
  - Did others do this the same?
- Exercise 3.19
  - I'm pretty sure this is a constant space implementation. Can we go over why?
- Exercise 3.14
  - Am I right that this reverses the list in place?
- Exercise 3.22
  - What is the appropriate return value for the mutators?
** Section 4
- Exercise 42: Does serialization work on the functions this way?
- Exercise 44: Are additional protections needed?
- Exercise 45: Is it deadlock?
** Section 5
- Exercise 3.51
  - I have no idea what's going on here, I would assume it would print
    the intermediate values.
- Exercise 3.53
  - I guessed this right, but I don't understand how it works
- Exercise 3.55
  - I don't have a good intuitive reasoning for this
  - Can we try diagramming it?

- Exercise 3.70
  - The incoming streams have to be ordered somehow, right?
* Chapter 4
** Section 1
- Exercise 4.6
  - Does this make sense? Can we walk through it?
- Exercise 4.14
  - I want to talk about the relationships of primitives
** Section 2

- 4.26: when would you ever want `unless` as a higher order procedure?
- 4.27: Can we step through this evaluation?
  - 4.29 same deal
